generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Usuario {
    id       String   @id @default(cuid())
    nombre   String
    apellido String
    usuario  String   @unique
    email    String   @unique
    telefono String   @unique
    password String
    sesiones Sesion[]
}

model Cliente {
    id                   String                 @id @default(cuid())
    nombre               String
    apellido             String?
    email                String?                @unique
    telefono             String?
    Pago                 Pago[]
    WhatsappNotification WhatsappNotification[]
    creado               DateTime               @default(now())
}

model Sesion {
    id        String   @id
    expira    DateTime
    usuarioId String
    usuario   Usuario  @relation(references: [id], fields: [usuarioId], onDelete: Cascade)
}

model Pago {
    id          String          @id @default(cuid())
    creado      DateTime        @default(now())
    actualizado DateTime        @updatedAt
    monto       Int
    estado      EstadoPago      @default(ABIERTO)
    membresia   EstadoMembresia
    cliente     Cliente         @relation(fields: [clienteId], references: [id], onDelete: Cascade)
    clienteId   String

    @@index([clienteId])
}

enum EstadoPago {
    ABIERTO
    PAGADO
    PENDIENTE
    FALLIDO
}

enum EstadoMembresia {
    DIARIO
    MENSUAL
}

// Notifications sent to clients via WhatsApp to avoid duplicates per cohort/month
model WhatsappNotification {
    id                String             @id @default(cuid())
    cliente           Cliente            @relation(fields: [clienteId], references: [id], onDelete: Cascade)
    clienteId         String
    cohort            NotificationCohort
    year              Int
    month             Int
    status            NotificationStatus
    providerMessageId String?
    error             String?
    createdAt         DateTime           @default(now())

    @@unique([clienteId, cohort, year, month])
    @@index([cohort, year, month])
}

enum NotificationCohort {
    PRE_EOM
    POST_EOM
}

enum NotificationStatus {
    SENT
    SKIPPED
    FAILED
}

// Scheduled notifications for WhatsApp messages
model ScheduledNotification {
    id                String                      @id @default(cuid())
    message           String // Description of the notification
    recipientType     RecipientType               @default(ALL)
    selectedClientIds String[] // Array of client IDs when recipientType is SELECTED
    membershipFilter  MembershipFilter? // Filter by membership type
    sendDate          DateTime // When to send the notification
    recurrence        RecurrenceType              @default(ONE_TIME)
    templateName      String // WhatsApp template name
    status            ScheduledNotificationStatus @default(PENDING)
    sentAt            DateTime? // When it was actually sent
    error             String? // Error message if failed
    createdAt         DateTime                    @default(now())
    updatedAt         DateTime                    @updatedAt

    // Relations - Note: selectedClientIds is stored as String[] for simplicity

    @@index([status, sendDate])
    @@index([recipientType])
}

enum RecipientType {
    ALL
    SELECTED
}

enum MembershipFilter {
    DIARIO
    MENSUAL
    BOTH
}

enum RecurrenceType {
    ONE_TIME
    WEEKLY
    MONTHLY
}

enum ScheduledNotificationStatus {
    PENDING
    SENT
    FAILED
    CANCELLED
}
